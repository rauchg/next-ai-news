import {
  db,
  usersTable,
  storiesTable,
  composeStoryId,
  votesTable,
} from "@/app/db";
import { TimeAgo } from "@/components/time-ago";
import { notFound } from "next/navigation";
import { headers } from "next/headers";
import { nanoid } from "nanoid";
import { sql } from "drizzle-orm";
import { Suspense } from "react";
import { Comments } from "@/components/comments";
import { ReplyForm } from "./reply-form";
import Link from "next/link";
import { UnvoteForm, VoteForm } from "@/components/voting";
import { Session } from "next-auth";
import { auth } from "@/app/auth";

export const metadata = {
  openGraph: {
    title: "Next AI News",
    url: "https://next-ai-news.vercel.app",
    siteName: "Next AI News",
  },
  twitter: {
    title: "Next AI News",
    card: "summary_large_image",
    site: "@rauchg",
    creator: "@rauchg",
  },
};

type GetStoryOptions = { idParam: string; session: Session | null };

const getStory = async function getStory({
  idParam,
  session,
}: GetStoryOptions) {
  const id = composeStoryId(idParam);
  const userId = session?.user?.id;

  const query = db
    .select({
      ...{
        id: storiesTable.id,
        title: storiesTable.title,
        domain: storiesTable.domain,
        url: storiesTable.url,
        username: storiesTable.username,
        points: storiesTable.points,
        submitted_by: storiesTable.submitted_by,
        author_username: usersTable.username,
        comments_count: storiesTable.comments_count,
        created_at: storiesTable.created_at,
      },
      ...(userId
        ? {
            voted_by_me: sql<boolean>`${votesTable.id} IS NOT NULL`,
          }
        : {}),
    })
    .from(storiesTable)
    .where(sql`${storiesTable.id} = ${id}`)
    .limit(1)
    .leftJoin(usersTable, sql`${usersTable.id} = ${storiesTable.submitted_by}`);

  if (userId) {
    query.leftJoin(
      votesTable,
      sql`${votesTable.story_id} = ${storiesTable.id} AND ${votesTable.user_id} = ${userId}`
    );
  }

  return (await query.execute())[0];
};

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/r/0CgFbz6suAU
 */

export default async function ItemPage({
  params: { id: idParam },
}: {
  params: { id: string };
}) {
  const rid = headers().get("x-vercel-id") ?? nanoid();
  const session = await auth();
  const userId = session?.user?.id;

  console.time(`fetch story ${idParam} (req: ${rid})`);
  const story = await getStory({ idParam, session });
  console.timeEnd(`fetch story ${idParam} (req: ${rid})`);

  if (!story) {
    notFound();
  }

  const submittedByMe = userId && userId === story.submitted_by;

  const now = Date.now();
  return (
    <div className="px-3">
      <div className="mb-4 flex items-start gap-x-0.5">
        <div className="flex flex-col items-center gap-y-1">
          <VoteForm
            storyId={composeStoryId(idParam)}
            votedByMe={!!story.voted_by_me}
          />
        </div>
        <div className="flex-grow">
          {story.url != null ? (
            <a
              className="text-[#000000] hover:underline"
              rel={"nofollow noreferrer"}
              target={"_blank"}
              href={story.url}
            >
              {story.title}
            </a>
          ) : (
            <Link
              prefetch={true}
              href={`/item/${story.id.replace(/^story_/, "")}`}
              className="text-[#000000] hover:underline"
            >
              {story.title}
            </Link>
          )}

          {story.domain && (
            <span className="text-xs ml-1 text-[#666] md:text-[#828282]">
              ({story.domain})
            </span>
          )}

          <div className="text-xs text-[#666] md:text-[#828282]">
            {story.points} point{story.points > 1 ? "s" : ""} by{" "}
            {story.author_username ?? story.username}{" "}
            <TimeAgo now={now} date={story.created_at} />
            <span aria-hidden={true}> | </span>
            <span className="cursor-default" title="Not implemented">
              flag
            </span>
            {story.voted_by_me && !submittedByMe && (
              <UnvoteForm storyId={story.id} />
            )}
            <span aria-hidden={true}> | </span>
            <span className="cursor-default" title="Not implemented">
              hide
            </span>
            <span aria-hidden={true}> | </span>
            <Link
              prefetch={true}
              className="hover:underline"
              href={`/item/${story.id.replace(/^story_/, "")}`}
            >
              {story.comments_count} comments
            </Link>
          </div>
          <div className="my-4 max-w-2xl space-y-3">
            <ReplyForm storyId={story.id} />
          </div>
        </div>
      </div>

      <Suspense fallback={null}>
        <Comments storyId={story.id} />
      </Suspense>
    </div>
  );
}
